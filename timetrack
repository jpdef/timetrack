#!/usr/bin/env python2.7
import pyunix
import sys
import os
import subprocess
import csv
import time
import datetime
import encryptsc

data_dir = os.environ.get("TIMETRACKPATH")
month_file = data_dir + "/june-2016.csv"
month_file_scramble = data_dir + "/june-2016.csv.asc"
todayCommit = datetime.date.today().strftime("%d-%m-%y")

def how_many_minutes(start,end):
    hstart , mstart = start.tm_hour, start.tm_min
    hend   , mend = end.tm_hour, end.tm_min
    
    return (hend - hstart)*60 + (mend -mstart)

def write_start(subject):
    with open(month_file,"a") as trackfile:
        trackwriter = csv.writer(trackfile, delimiter=',')
        trackwriter.writerow([subject,datetime.datetime.now().strftime("%H:%M")])

def write_date():
    with open(month_file,"a") as trackfile:
        trackwriter = csv.writer(trackfile, delimiter=',')
        trackwriter.writerow([datetime.datetime.now().strftime("%m-%d")])

def exists(key,column):
    with open(month_file,"rb") as trackfile:
        trackreader = csv.reader(trackfile)
        found = False
        for row in trackreader:
            if row[column] == key :
                found = True
        return found

def todayexists():
    return exists(datetime.datetime.now().strftime("%m-%d"),0)
    
def update_remote(forWhom):
  encryptsc.encrypt(forWhom,month_file)
  encryptsc.gitcommit(todayCommit)
  encryptsc.gitpush()

def update_local():
  encryptsc.gitpull()
  encryptsc.decrypt(month_file_scramble)

def add(content):
  #New Entries
  with open(month_file,"a") as trackfile:
      trackwriter = csv.writer(trackfile, delimiter=',')
      trackwriter.writerow(content)

if len(sys.argv) > 1 : 
     if( not todayexists()):
         write_date()   
     #Usage
     if sys.argv[1] == "--total":
        with open(month_file,"rb") as trackfile:
            trackreader = csv.reader(trackfile)
            total = 0
            for row in trackreader:
                if len(row) > 2 :
                    start = time.strptime(row[1], "%H:%M")
                    end   = time.strptime(row[2], "%H:%M")
                    total += how_many_minutes(start,end)
                    print "{} {} minutes".format(row[0] ,how_many_minutes(start,end))
        print "Total := {} minutes".format(total)
     
     elif sys.argv[1] == "--today":
        with open(month_file,"rb") as trackfile:
            trackreader = csv.reader(trackfile)
            total = 0
            today = False
            for row in trackreader:
                if row[0] == datetime.datetime.now().strftime("%m-%d"):
                    today = True
                elif len(row) > 2 and today :
                    start = time.strptime(row[1], "%H:%M")
                    end   = time.strptime(row[2], "%H:%M")
                    total += how_many_minutes(start,end)
                    print "{} {} minutes".format(row[0] ,how_many_minutes(start,end))
                else :
                    today = False
        print "Total := {} minutes".format(total)
     
     elif sys.argv[1] == "--date":
        with open(month_file,"rb") as trackfile:
            trackreader = csv.reader(trackfile)
            total = 0
            today = False
            for row in trackreader:
                if row[0] == sys.argv[2] :
                    today = True
                elif len(row) > 2 and today :
                    start = time.strptime(row[1], "%H:%M")
                    end   = time.strptime(row[2], "%H:%M")
                    total += how_many_minutes(start,end)
                    print "{} {} minutes".format(row[0] ,how_many_minutes(start,end))
                else :
                    today = False
        print "Total := {} minutes".format(total)

     elif sys.argv[1] == "--start-day": 
         write_date() 
         if(len(sys.argv) > 1):
             write_start(sys.argv[2])
  
     elif sys.argv[1] == "--start":
         write_start(sys.argv[2])
           
     elif sys.argv[1] == "--end":
        rows = [] 
        lastentry = "no end"
        with open(month_file,"rb") as trackfile:
            trackreader = csv.reader(trackfile)
            for row in trackreader:
                rows.append( row )
                lastentry = row
        with open(month_file,"wb") as trackfile:
             trackwriter = csv.writer(trackfile, delimiter=',')
             for row in rows:
                 if row == lastentry:
                     lastentry.append(datetime.datetime.now().strftime("%H:%M"))
                     lastentry.append(sys.argv[2]) 
                     trackwriter.writerow(lastentry)
                 else:
                     trackwriter.writerow(row)
     elif sys.argv[1] == "--show":
            print pyunix.cat(month_file)
   
     elif sys.argv[1] == "--edit":
            subprocess.call(["vim",month_file])
     
     elif sys.argv[1] == "--update-remote":
        if(len(sys.argv) < 2):
            print "Needs a reciepent"; 
        else:
            update_remote(sys.argv[2])
 
     elif sys.argv[1] == "--add":
         #New Entries
         add(sys.argv[2:])
     else:
         print "Usage timetrack -option [ticket] [start] [end] [comment]"
else : 
   print "Usage timetrack -option [ticket] [start] [end] [comment]"
